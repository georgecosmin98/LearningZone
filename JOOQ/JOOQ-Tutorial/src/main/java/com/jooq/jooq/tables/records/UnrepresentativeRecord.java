/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.tables.records;


import com.jooq.jooq.tables.Unrepresentative;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnrepresentativeRecord extends UpdatableRecordImpl<UnrepresentativeRecord> implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>jooq_tutorial.unrepresentative.Pk_UNrepresentative_Id</code>.
     */
    public UnrepresentativeRecord setPkUnrepresentativeId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>jooq_tutorial.unrepresentative.Pk_UNrepresentative_Id</code>.
     */
    public Integer getPkUnrepresentativeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jooq_tutorial.unrepresentative.Name</code>.
     */
    public UnrepresentativeRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jooq_tutorial.unrepresentative.Name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq_tutorial.unrepresentative.Gender</code>.
     */
    public UnrepresentativeRecord setGender(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jooq_tutorial.unrepresentative.Gender</code>.
     */
    public String getGender() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jooq_tutorial.unrepresentative.Fk_Country_Id</code>.
     */
    public UnrepresentativeRecord setFkCountryId(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>jooq_tutorial.unrepresentative.Fk_Country_Id</code>.
     */
    public Integer getFkCountryId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Unrepresentative.UNREPRESENTATIVE.PK_UNREPRESENTATIVE_ID;
    }

    @Override
    public Field<String> field2() {
        return Unrepresentative.UNREPRESENTATIVE.NAME;
    }

    @Override
    public Field<String> field3() {
        return Unrepresentative.UNREPRESENTATIVE.GENDER;
    }

    @Override
    public Field<Integer> field4() {
        return Unrepresentative.UNREPRESENTATIVE.FK_COUNTRY_ID;
    }

    @Override
    public Integer component1() {
        return getPkUnrepresentativeId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getGender();
    }

    @Override
    public Integer component4() {
        return getFkCountryId();
    }

    @Override
    public Integer value1() {
        return getPkUnrepresentativeId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getGender();
    }

    @Override
    public Integer value4() {
        return getFkCountryId();
    }

    @Override
    public UnrepresentativeRecord value1(Integer value) {
        setPkUnrepresentativeId(value);
        return this;
    }

    @Override
    public UnrepresentativeRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public UnrepresentativeRecord value3(String value) {
        setGender(value);
        return this;
    }

    @Override
    public UnrepresentativeRecord value4(Integer value) {
        setFkCountryId(value);
        return this;
    }

    @Override
    public UnrepresentativeRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UnrepresentativeRecord
     */
    public UnrepresentativeRecord() {
        super(Unrepresentative.UNREPRESENTATIVE);
    }

    /**
     * Create a detached, initialised UnrepresentativeRecord
     */
    public UnrepresentativeRecord(Integer pkUnrepresentativeId, String name, String gender, Integer fkCountryId) {
        super(Unrepresentative.UNREPRESENTATIVE);

        setPkUnrepresentativeId(pkUnrepresentativeId);
        setName(name);
        setGender(gender);
        setFkCountryId(fkCountryId);
    }

    /**
     * Create a detached, initialised UnrepresentativeRecord
     */
    public UnrepresentativeRecord(com.jooq.jooq.tables.pojos.Unrepresentative value) {
        super(Unrepresentative.UNREPRESENTATIVE);

        if (value != null) {
            setPkUnrepresentativeId(value.getPkUnrepresentativeId());
            setName(value.getName());
            setGender(value.getGender());
            setFkCountryId(value.getFkCountryId());
        }
    }
}
